@import "../../styles/variables/variables";
$color-opacity: .3;

.menu-container {
  background: $text-light;
  color: $border;
  // position: absolute;
  // top: 2rem;
  // right: 2rem;
  display: flex;
  flex-direction: column;
  box-shadow: 0 0 3px 0 rgba($border, $color-opacity);
  margin: auto;
}

.header {
  line-height: 2.5;
  text-align: center;
}

.red {
  background-color: $error;
  color: $text-light;
  border: none;
}

.content {
  padding: 1rem;

  input {
    margin: .5rem auto;
    line-height: 3.5;

    &:not([type=checkbox]) {
      width: 100%;
    }
  }

  section.loginBTN {
    padding: 1.5rem;
    text-align: center;
    border-bottom: 1px solid $border;
  }

  section.footer {
    text-align: center;

    a {
      color: $error;
      text-decoration: underline;
    }
  }
}

::ng-deep ngb-modal-backdrop.modal-backdrop {
  background-color: #0000;
}



.floating {
  background-color: transparent;
  transition: background-color 0.2s ease;
  // margin-bottom: 2rem;
  // border-top-left-radius: 4px;
  // border-top-right-radius: 4px;
}

.floating:hover,
.floating:focus-within {
  background-color: rgba($error, $color-opacity);
}

.floating__input {
  outline: none;
  border: 1px solid rgba($border, $color-opacity);
  transition: border-color 0.2s ease;
  color: $border;
  background: none;
  // font-size: 1rem;
  // caret-color: $border;
}

.floating:hover .floating__input,
.floating:focus-within .floating__input {
  border-color: transparent;
}

.floating__input::placeholder {
  color: rgba(0, 0, 0, 0);
}

.floating__label {
  display: block;
  position: relative;
  max-height: 0;
  font-weight: 500;
  pointer-events: none;
}

.floating__label::before {
  color: rgba($border, $color-opacity);
  content: attr(data-content);
  display: inline-block;
  filter: blur(0);
  backface-visibility: hidden;
  transform-origin: left top;
  transition: transform 0.2s ease;
  left: 1rem;
  position: relative;
}

.floating__label::after {
  bottom: 1rem;
  content: "";
  height: 0.1rem;
  position: absolute;
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1),
    opacity 180ms cubic-bezier(0.4, 0, 0.2, 1), background-color 0.3s ease;
  opacity: 0;
  left: 0;
  top: 100%;
  margin-top: -0.1rem;
  transform: scale3d(0, 1, 1);
  width: 100%;
  background-color: $error;
}

.floating__input:focus+.floating__label::after {
  transform: scale3d(1, 1, 1);
  opacity: 1;
}

.floating__input:placeholder-shown+.floating__label::before {
  transform: translate3d(0, -2.2rem, 0) scale3d(1, 1, 1);
}

.floating__label::before,
.floating__input:focus+.floating__label::before {
  transform: translate3d(0, -4.12rem, 0) scale3d(0.82, 0.82, 1);
}

.floating__input:focus+.floating__label::before {
  color: $error;
}

fieldset {
  padding: 3rem 2rem 1.5rem;
}

legend {
  padding: 0 0.5rem;
}

/* apply a natural box layout model to all elements, but allowing components to change */

.hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/* Checkbox */
input[type="checkbox"] {
  position: absolute;
  opacity: 0;
  z-index: -1;
}

input[type="checkbox"]+label {
  position: relative;
  display: inline-block;
  padding: 0 0 0 2em;
  height: 1.5em;
  line-height: 1.5;
  cursor: pointer;
}

input[type="checkbox"]+label::before,
input[type="checkbox"]+label::after {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
}

input[type="checkbox"]+label::before {
  content: " ";
  border: 2px solid $border;
  border-radius: 20%;
  width: 1.5em;
  height: 1.5em;
}

input[type="checkbox"]+label::after {
  content: " ";
  border: 2px solid $text-light;
  border-top: none;
  border-right: none;
  line-height: 1.5;
  height: .4rem;
  left: .3rem;
  top: .4rem;
  width: 1rem;
}

/* :checked */
input[type="checkbox"]:checked+label::before {
  background: $error;
  border-color: $error;
}

input[type="checkbox"]+label::after {
  transform: scale(0);
}

input[type="checkbox"]:checked+label::after {
  transform: scale(1) rotate(-45deg);
}

/* Transition */
label::before,
label::after {
  transition: .25s all ease;
}
